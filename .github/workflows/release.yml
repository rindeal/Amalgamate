name: Release

permissions:
  contents: write

on:
  push:
    tags:
    - 'v*.*.*'

env:
  GH_TAG: ${{ github.ref_name }}
  REL_TAG: ${{ github.ref_name }}

jobs:
  draft:
    runs-on: ubuntu-latest
    steps:
      - name: Create draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: >
          gh release create "${GH_TAG}"
          --title "amalgamate ${REL_TAG}"
          --draft
          --generate-notes
          --verify-tag

  source_code:
    needs: [ draft ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }

      - name: Initialize environment
        run: echo archives= "amalgamate-${{ github.ref_name }}-source-code."{zip,tar.gz} >> "${GITHUB_ENV}"

      - name: Create assets
        run: printf "%s\n" ${archives} | xargs --verbose --max-args=1 pipx run git-archive-all --verbose | grep -v /3rd/

      - name: Upload assets
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        run: gh release upload --clobber "${GH_TAG}" ${archives}

  linux_n_macos:
    needs: [ draft ]
    strategy: { matrix: { os: [ ubuntu-latest, macos-13, macos-14 ] } }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }
      
      - name: Build
        run: make

      - name: Create and upload assets
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        run: make gh-upload

  windows:
    needs: [ draft ]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with: { submodules: true }
      - uses: ilammy/msvc-dev-cmd@v1
      
      - name: Initialize environment
        run: Add-Content "${env:GITHUB_ENV}" "archive=amalgamate-${env:REL_TAG}-windows-amd64.zip"

      - name: Build
        run: ./build.bat

      - name: Create assets
        run: Compress-Archive -verbose -Path "amalgamate.exe", "README.md", "LICENSE" -DestinationPath "${env:archive}"

      - name: Upload assets
        env: { GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}" }
        run: gh release upload --clobber "${env:GH_TAG}" "${env:archive}"
  
  finish:
    needs: [ source_code, linux_n_macos, windows ]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_REPO: ${{ github.repository }}
      AUTOGEN_RELNOTES_PATH: "${{github.workspace}}/autogen-release-notes.md"
      RELNOTES_PATH: "${{github.workspace}}/relnotes.md"
      ASSETS_DIR_PATH: "${{github.workspace}}/assets"
      CHECKSUM_PATH: "${{github.workspace}}/sha256sum.txt"
    steps:
      - name: "Download automatically generated release notes"
        run: gh release view --json body --jq .body "${GH_TAG}" > "${AUTOGEN_RELNOTES_PATH}"
      - name: "Download assets"
        run: gh release download --dir "${ASSETS_DIR_PATH}" "${GH_TAG}"
      - name: "Generate checksum file"
        run: |
          set -evx
          cd "${ASSETS_DIR_PATH}"
          sha256sum * > "${CHECKSUM_PATH}"
      - name: "Upload checksum file"
        run: gh release upload --clobber "${GH_TAG}" "${CHECKSUM_PATH}"
      - name: "Relnotes: init"
        run: |
          set -evx
          br(){ echo "" >> "${RELNOTES_PATH}";}
      - name: "Relnotes: append auto notes"
        run: cat "${AUTOGEN_RELNOTES_PATH}" >> "${RELNOTES_PATH}"
      - name: "Relnotes: checksum section"
        run: |
          wget "https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/.github/relnotes-checksum-md.sh"
          . "relnotes-checksum-md.sh" >> "${RELNOTES_PATH}"
      - name: "Finish release"
        run: gh release edit --draft=false --notes-file "${RELNOTES_PATH}" "${GH_TAG}"
